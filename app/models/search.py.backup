import logging
from typing import List, Optional

from pydantic import BaseModel, Field

logger = logging.getLogger(__name__)


class SearchResult(BaseModel):
    """搜索结果模型"""

    title: str = Field(..., description="书名")
    author: str = Field(default="", description="作者")
    intro: str = Field(default="", description="简介")
    cover: str = Field(default="", description="封面")
    url: str = Field(..., description="链接")
    category: str = Field(default="", description="分类")
    status: str = Field(default="", description="状态")
    word_count: str = Field(default="", description="字数")
    update_time: str = Field(default="", description="更新时间")
    latest_chapter: str = Field(default="", description="最新章节")
    source_id: int = Field(default=0, description="书源ID")
    source_name: str = Field(default="", description="书源名称")
    score: float = Field(default=0.0, description="相关性得分")

    def __getattr__(self, name):
        """动态属性访问，支持bookName等旧属性名"""
        if name == "bookName":
            return self.title
        elif name == "sourceId":
            return self.source_id
        elif name == "sourceName":
            return self.source_name
        elif name == "latestChapter":
            return self.latest_chapter
        elif name == "lastUpdateTime":
            return self.update_time
        elif name == "wordCount":
            return self.word_count
        elif name == "coverUrl":
            return self.cover
        else:
            raise AttributeError(
                f"'{self.__class__.__name__}' object has no attribute '{name}'"
            )

    def model_dump(self, **kwargs):
        """自定义序列化，包含兼容性字段"""
        data = super().model_dump(**kwargs)
        # 添加兼容性字段
        data["bookName"] = self.title
        data["sourceId"] = self.source_id
        data["sourceName"] = self.source_name
        data["latestChapter"] = self.latest_chapter
        data["lastUpdateTime"] = self.update_time
        data["wordCount"] = self.word_count
        data["coverUrl"] = self.cover
        return data


class SearchResponse(BaseModel):
    """搜索响应模型"""

    code: int = 200
    message: str = "success"
    data: List[SearchResult] = []
