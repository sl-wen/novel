name: Deploy Novel Search API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script_stop: true
        script: |
          # 安装系统依赖
          sudo apt-get update
          sudo apt-get install -y python3-venv python3-pip git
          
          # 检查并创建项目目录
          if [ ! -d "/var/www/novel-api" ]; then
            echo "创建项目目录..."
            sudo mkdir -p /var/www/novel-api
            sudo chown $USER:$USER /var/www/novel-api
          fi
          
          # 进入项目目录
          cd /var/www/novel-api
          echo "当前目录: $(pwd)"

          # 停止现有服务
          sudo systemctl stop novel-api || true
          
          # 检查是否是Git仓库
          if [ ! -d ".git" ]; then
            echo "初始化Git仓库..."
            git init
            git remote add origin git@github.com:${{ github.repository }}.git
          fi
          
          # 设置SSH环境变量
          export HOME=/root
          export SSH_AUTH_SOCK=""

          # 检查可用的SSH密钥
          SSH_KEY=""
          if [ -f /root/.ssh/id_ed25519 ]; then
            SSH_KEY="/root/.ssh/id_ed25519"
            echo "找到 Ed25519 密钥: $SSH_KEY"
          elif [ -f /root/.ssh/id_rsa ]; then
            SSH_KEY="/root/.ssh/id_rsa"
            echo "找到 RSA 密钥: $SSH_KEY"
          elif [ -f ~/.ssh/id_ed25519 ]; then
            SSH_KEY="~/.ssh/id_ed25519"
            echo "找到用户 Ed25519 密钥: $SSH_KEY"
          elif [ -f ~/.ssh/id_rsa ]; then
            SSH_KEY="~/.ssh/id_rsa"
            echo "找到用户 RSA 密钥: $SSH_KEY"
          else
            echo "❌ 未找到SSH密钥文件"
          fi
          
          # 启动SSH Agent并添加密钥
          if [ -n "$SSH_KEY" ]; then
            echo "配置SSH Agent..."
            eval "$(ssh-agent -s)"
            
            # 确保密钥权限正确
            chmod 600 "$SSH_KEY" 2>/dev/null || echo "无法修改密钥权限"
            
            # 添加密钥到SSH Agent
            ssh-add "$SSH_KEY" 2>/dev/null && echo "✅ SSH密钥已加载" || echo "⚠️ SSH密钥加载失败"
          fi
          
          # 拉取最新代码
          echo "拉取最新代码..."
          git config --global --add safe.directory /var/www/novel-api
          OLD_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
          
          # 设置Git SSH命令，指定密钥文件
          if [ -n "$SSH_KEY" ]; then
            export GIT_SSH_COMMAND="ssh -i $SSH_KEY -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes"
          else
            export GIT_SSH_COMMAND="ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes"
          fi
          
          # 尝试拉取代码
          echo "使用Git SSH命令: $GIT_SSH_COMMAND"
          if timeout 30 git fetch origin --prune; then
            echo "✅ 代码拉取成功"
            git reset --hard origin/main
            git checkout main
            git clean -fd
            
            NEW_COMMIT=$(git rev-parse HEAD)
            if [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
              echo "✅ 发现新提交，从 $OLD_COMMIT 更新到 $NEW_COMMIT"
            else
              echo "ℹ️ 已是最新版本，无需更新"
            fi
          else
            echo "❌ 代码拉取失败，使用本地版本继续部署"
            echo "Git状态: $(git status --porcelain 2>/dev/null || echo '无法获取Git状态')"
            echo "继续使用现有代码进行部署..."
          fi
          
          echo "代码更新完成"
          echo "最终提交: $(git log --oneline -n 1)"
          
          # 检查Python版本和venv模块
          echo "=== 检查Python环境 ==="
          python3 --version
          python3 -c "import venv; print('venv模块可用')" || echo "❌ venv模块不可用"
          
          # 删除旧的虚拟环境（如果存在）
          if [ -d "venv" ]; then
            echo "删除旧的虚拟环境..."
            rm -rf venv
          fi
          
          # 创建虚拟环境
          echo "=== 创建Python虚拟环境 ==="
          python3 -m venv venv || {
            echo "❌ 虚拟环境创建失败"
            echo "尝试安装python3-venv..."
            sudo apt-get install -y python3-venv
            python3 -m venv venv || {
              echo "❌ 虚拟环境创建仍然失败"
              exit 1
            }
          }
          
          echo "✅ 虚拟环境创建成功"
          
          # 激活虚拟环境并安装依赖
          echo "=== 激活虚拟环境 ==="
          source venv/bin/activate || {
            echo "❌ 虚拟环境激活失败"
            exit 1
          }
          
          echo "✅ 虚拟环境已激活"
          echo "Python路径: $(which python)"
          echo "Pip路径: $(which pip)"
          
          echo "=== 升级pip ==="
          pip install --upgrade pip || {
            echo "❌ pip升级失败"
            exit 1
          }
          
          echo "=== 安装Python依赖 ==="
          pip install -r requirements.txt || {
            echo "❌ 依赖安装失败"
            echo "尝试逐个安装关键依赖..."
            pip install fastapi uvicorn aiohttp beautifulsoup4 pydantic
            exit 1
          }
          
          # 验证虚拟环境
          echo "=== 验证虚拟环境 ==="
          python -c "import fastapi, uvicorn, aiohttp, bs4, pydantic; print('✅ 所有关键依赖已安装')" || {
            echo "❌ 关键依赖验证失败"
            pip list
            exit 1
          }
          
          # 创建必要的目录
          echo "创建必要目录..."
          mkdir -p downloads
          mkdir -p logs
          
          # 检查文件是否存在
          echo "检查关键文件..."
          ls -la requirements.txt || echo "requirements.txt不存在"
          ls -la app/main.py || echo "app/main.py不存在"
          
          # 停止现有服务
          sudo systemctl stop novel-api || true
          
          # 创建systemd服务文件
          echo "=== 创建systemd服务文件 ==="
          CURRENT_DIR=$(pwd)
          VENV_PATH="$CURRENT_DIR/venv"
          
          echo "当前目录: $CURRENT_DIR"
          echo "虚拟环境路径: $VENV_PATH"
          echo "Python可执行文件: $VENV_PATH/bin/python"
          
          # 验证虚拟环境中的Python
          if [ ! -f "$VENV_PATH/bin/python" ]; then
            echo "❌ 虚拟环境中的Python不存在"
            exit 1
          fi
          
          sudo tee /etc/systemd/system/novel-api.service > /dev/null <<EOF
          [Unit]
          Description=Novel Search API
          After=network.target
          
          [Service]
          Type=simple
          User=$USER
          Group=$USER
          WorkingDirectory=$CURRENT_DIR
          Environment=PATH=$VENV_PATH/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          Environment=PYTHONPATH=$CURRENT_DIR
          Environment=PYTHONUNBUFFERED=1
          ExecStart=$VENV_PATH/bin/python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # 重新加载systemd配置
          echo "重新加载systemd配置..."
          sudo systemctl daemon-reload
          
          # 启动服务
          echo "启动systemd服务..."
          sudo systemctl start novel-api
          sudo systemctl enable novel-api
          
          # 检查服务状态
          echo "=== 检查服务状态 ==="
          sudo systemctl status novel-api --no-pager
          
          # 检查端口是否监听
          echo "=== 检查端口监听 ==="
          netstat -tlnp | grep 8000 || echo "端口8000未监听"
          
          # 检查进程
          echo "=== 检查进程 ==="
          ps aux | grep uvicorn || echo "未找到uvicorn进程"
          
          # 检查日志
          echo "=== 检查服务日志 ==="
          sudo journalctl -u novel-api --no-pager -n 20
          
    - name: Setup Nginx
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          # 创建Nginx配置文件
          sudo tee /etc/nginx/sites-available/novel-api > /dev/null <<EOF
          server {
              listen 80;
              server_name slwen.cn;  # 替换为您的域名
              
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  
                  # 支持大文件下载
                  proxy_max_temp_file_size 0;
                  proxy_buffering off;
                  proxy_request_buffering off;
              }
              
              # 静态文件缓存
              location ~* \.(txt|epub|pdf)$ {
                  expires 1d;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF
          
          # 启用站点
          sudo ln -sf /etc/nginx/sites-available/novel-api /etc/nginx/sites-enabled/
          
          # 测试Nginx配置
          sudo nginx -t
          
          # 重启Nginx
          sudo systemctl reload nginx
          
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          echo "=== 开始健康检查 ==="
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 30
          
          # 检查服务状态
          echo "=== 检查服务状态 ==="
          sudo systemctl status novel-api --no-pager || echo "服务状态检查失败"
          
          # 检查端口监听
          echo "=== 检查端口监听 ==="
          netstat -tlnp | grep 8000 || echo "端口8000未监听"
          ss -tlnp | grep 8000 || echo "ss命令显示端口8000未监听"
          
          # 检查进程
          echo "=== 检查进程 ==="
          ps aux | grep uvicorn || echo "未找到uvicorn进程"
          ps aux | grep python | grep uvicorn || echo "未找到python uvicorn进程"
          
          # 检查日志
          echo "=== 检查服务日志 ==="
          sudo journalctl -u novel-api --no-pager -n 20 || echo "无法获取服务日志"
          
          # 检查虚拟环境
          echo "=== 检查虚拟环境 ==="
          ls -la venv/bin/python || echo "虚拟环境Python不存在"
          venv/bin/python --version || echo "虚拟环境Python版本检查失败"
          
          # 尝试本地健康检查
          echo "=== 尝试本地健康检查 ==="
          for i in {1..5}; do
            echo "尝试第 $i 次本地连接..."
            if curl -f --connect-timeout 10 http://localhost:8000/; then
              echo "✅ 本地API服务启动成功！"
              break
            else
              echo "❌ 第 $i 次本地连接失败"
              sleep 10
            fi
          done
          
          # 尝试远程健康检查
          echo "=== 尝试远程健康检查 ==="
          for i in {1..3}; do
            echo "尝试第 $i 次远程连接..."
            if curl -f --connect-timeout 10 http://127.0.0.1:8000/; then
              echo "✅ 远程API服务启动成功！"
              exit 0
            else
              echo "❌ 第 $i 次远程连接失败"
              sleep 5
            fi
          done
          
          echo "❌ 健康检查失败，服务可能未正常启动"
          echo "=== 最终诊断信息 ==="
          echo "当前目录: $(pwd)"
          echo "文件列表:"
          ls -la
          echo "虚拟环境内容:"
          ls -la venv/bin/ || echo "虚拟环境不存在"
          echo "服务配置:"
          cat /etc/systemd/system/novel-api.service || echo "服务配置文件不存在"
          exit 1 